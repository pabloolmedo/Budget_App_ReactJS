{"version":3,"sources":["components/Error.js","components/Question.js","components/Form.js","components/Expense.js","components/List.js","helpers.js","components/BudgetControl.js","App.js","serviceWorker.js","index.js"],"names":["Error","message","className","Question","saveBudget","setBalance","updateQuestion","useState","quantity","setQuanqtity","error","setError","onSubmit","event","preventDefault","isNaN","type","placeholder","onChange","parseInt","target","value","Form","setExpense","setCreateExpense","reference","saveReference","amount","saveAmount","e","trim","expense","id","shortid","generate","Expense","List","outlay","map","key","checkBudget","budget","balance","BudgetControl","App","showquestion","setOutlay","createExpense","useEffect","actualBalance","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.ea37d72a.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Error = ({message}) => {\r\n    return (\r\n    <p className=\"alert alert-danger error\">{message}</p>\r\n      );\r\n}\r\nError.propTypes = {\r\n  message: PropTypes.string.isRequired\r\n}\r\n \r\nexport default Error;","import React, { Fragment, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Error from './Error';\r\n\r\nconst Question = ({ saveBudget, setBalance, updateQuestion }) => {\r\n    //State\r\n    const [quantity, setQuanqtity] = useState(0);\r\n    const [error, setError] = useState(false);\r\n    //setBudget function\r\n    const setBudget = (event) => {\r\n        setQuanqtity(parseInt(event.target.value, 10));\r\n    }\r\n\r\n    //submit budget\r\n    const addBudget = (event) => {\r\n        event.preventDefault();\r\n\r\n        //validation\r\n        if (quantity < 1 || isNaN(quantity)) {\r\n            setError(true);\r\n            return;\r\n        }\r\n\r\n        //actions\r\n        setError(false);\r\n        saveBudget(quantity);\r\n        setBalance(quantity);\r\n        updateQuestion(false);\r\n\r\n    }\r\n    return (\r\n\r\n        \r\n        \r\n        <Fragment>\r\n            <h2>Add your budget</h2>\r\n            {error ? <Error message=\"Is not a valid budget\" /> : null}\r\n\r\n            <form\r\n                onSubmit={addBudget}\r\n            >\r\n                <input\r\n                    type=\"number\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Add your budget\"\r\n                    onChange={setBudget}\r\n                />\r\n\r\n                <input\r\n                    type=\"submit\"\r\n                    className=\" button-primary u-full-width\"\r\n                    value=\"Define budget\"\r\n\r\n                />\r\n            </form>\r\n        </Fragment>\r\n    );\r\n}\r\nQuestion.propTypes = {\r\n    saveBudget: PropTypes.func.isRequired,\r\n    setBalance: PropTypes.func.isRequired,\r\n    updateQuestion: PropTypes.func.isRequired\r\n}\r\nexport default Question;","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Error from './Error';\r\nimport shortid from 'shortid';\r\n\r\n\r\nconst Form = ({ setExpense, setCreateExpense }) => {\r\n    const [reference, saveReference] = useState('');\r\n    const [amount, saveAmount] = useState(0);\r\n    const [error, setError] = useState(false);\r\n\r\n\r\n    // submit function\r\n    const addExpense = e => {\r\n        e.preventDefault();\r\n\r\n        //validate form\r\n        if (reference.trim() === '' || amount < 1 || isNaN(amount)) {\r\n            setError(true);\r\n            return;\r\n        }\r\n        setError(false);\r\n        //build object  \r\n        const expense = {\r\n            reference,\r\n            amount,\r\n            id: shortid.generate()\r\n        }\r\n\r\n        //send expense to app component\r\n        setExpense(expense);\r\n        setCreateExpense(true);\r\n\r\n        //reset form\r\n        saveReference('');\r\n        saveAmount(0);\r\n\r\n    }\r\n    return (\r\n\r\n\r\n\r\n        <form\r\n\r\n            onSubmit={addExpense}\r\n        >\r\n            <h2>Add your expenses here</h2>\r\n\r\n            {error ? <Error message=\"Both inputs are rquired or wrong expense\" /> : null}\r\n\r\n\r\n            <div className=\"campo\">\r\n                <label>Expenses</label>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Ex. Transport\"\r\n                    value={reference}\r\n                    onChange={e => saveReference(e.target.value)}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"campo\">\r\n                <label>Amount of expenses</label>\r\n                <input\r\n                    type=\"number\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Ex. 1000\"\r\n                    value={amount}\r\n                    onChange={e => saveAmount(parseInt(e.target.value) || amount)}\r\n                />\r\n            </div>\r\n\r\n            <input\r\n                type=\"submit\"\r\n                className=\"button-primary u-full-width\"\r\n                value=\"Add expense\"\r\n\r\n            />\r\n        </form>\r\n\r\n    );\r\n}\r\n\r\n\r\nForm.propTypes = {\r\n    setExpense: PropTypes.func.isRequired,\r\n    setCreateExpense: PropTypes.func.isRequired\r\n\r\n}\r\nexport default Form;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Expense = ({ expense }) => { \r\n    return (\r\n    <li className=\"gastos\">\r\n        <p>\r\n             {expense.reference}\r\n\r\n            <span className=\"gasto\">${expense.amount}</span>\r\n        </p>\r\n\r\n    </li>\r\n)}\r\n\r\nExpense.propTypes = {\r\n    expense: PropTypes.object.isRequired\r\n}\r\nexport default Expense;","import React from 'react';\r\nimport Expense from './Expense';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst List = ({outlay}) => {\r\n    return (  \r\n        <div className=\"gastos-realizados\">\r\n            <h2>Expenses</h2>\r\n            {outlay.map(expense=>(\r\n                <Expense \r\n                key={expense.id}\r\n                expense={expense}\r\n\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nList.propTypes = {\r\n    outlay: PropTypes.array.isRequired\r\n}\r\n \r\nexport default List;\r\n\r\n","export const checkBudget = (budget, balance)=>{\r\n    let classType;\r\n\r\n    if((budget/4) > balance){\r\n        classType = 'alert alert-danger';\r\n    }else if((budget/2) > balance){\r\n        classType= 'alert alert-warning';\r\n    }else{\r\n        classType = 'alert alert-success';\r\n    }\r\n\r\n    return classType;\r\n}","import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { checkBudget } from '../helpers';\r\n\r\n\r\n\r\nconst BudgetControl = ({budget, balance}) => {\r\n    return (\r\n        <Fragment>\r\n            <div className=\"alert alert-primary\">\r\n                Budget:${budget}\r\n            </div>\r\n            <div className={checkBudget(budget, balance)}>\r\n                Balance:${balance}\r\n            </div>\r\n        </Fragment>\r\n\r\n    );\r\n}\r\n\r\nBudgetControl.propTypes = {\r\n    budget: PropTypes.number.isRequired,\r\n    balance: PropTypes.number.isRequired\r\n}\r\nexport default BudgetControl;","import React, { useState, useEffect } from 'react';\nimport Question from './components/Question';\nimport Form from './components/Form';\nimport List from './components/List';\nimport BudgetControl from './components/BudgetControl';\n\n\nfunction App() {\n  //state\n  const [budget, saveBudget] = useState(0);\n  const [balance, setBalance] = useState(0);\n  const [showquestion, updateQuestion] = useState(true);\n  const [outlay, setOutlay] = useState([]);\n  const [expense, setExpense] = useState({});\n  const [ createExpense, setCreateExpense] = useState(false);\n\n  //useEffect refresh Balance\n  useEffect(() => {\n    //add new budget\n    if(createExpense){\n      setOutlay([\n        ...outlay,\n        expense\n      ]);\n\n      //show actual balance\n      const actualBalance = balance - expense.amount;\n      setBalance(actualBalance);\n\n      //reset\n      setCreateExpense(false);\n    }\n  }, [expense, createExpense, outlay, balance])\n\n\n\n\n\n  return (\n    <div className=\"container\">\n      <header>\n        <h1>Weekly Budget</h1>\n\n        <div className=\"contenido-principal contenido\">\n          {showquestion ?\n            (\n              <Question\n                saveBudget={saveBudget}\n                setBalance={setBalance}\n                updateQuestion={updateQuestion}\n              />\n            )\n            :\n            (\n              <div className=\"row\">\n                <div className=\"one-half column\">\n                  <Form\n                    setExpense={setExpense}\n                    setCreateExpense={setCreateExpense}\n                  />\n                </div>\n                <div className=\"one-half column\">\n                  <List\n                    outlay={outlay}\n                  />\n\n                  <BudgetControl\n                    budget={budget}\n                    balance={balance}\n                  />\n                </div>\n              </div>\n            )}\n\n\n        </div>\n      </header>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}